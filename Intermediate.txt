Commands
	Ø Docker container run -ti ubuntu bash
		? Apt-get update
		? Apt-get install -y figlet
		? Figlet "hello docker"
		? Exit
	Ø Docker container ls -a
	Ø Docker container diff <container ID>
		? To see list of all changes that you made on the container 
	Ø Docker container commit <container ID>
		? Commit the container to create an image, which stores in local system running dockr engine
	Ø Docker image ls
	Ø Docker image tag <image ID> <NAME>
		? Tagging your newly created image
	Ø Docker image ls
	Ø Docker container run <NAME> figlet woohoo
		? To run a container based on new created image
	
Create a Dockerfile - for creating images
		Ø Vi index.js
			Var os=require["os"]
			Var hostname=os.hostname();
			Console.log("hello from " + hostname);
		Ø Vi Dockerfile
			FROM alpine
			RUN apk update && apk add nodejs
			COPY . /app
			WORKDIR /app
			CMD ["node","index.js"]
	
		Ø Docker image build -t hello:v0.1 .
		Ø Docker image ls
		Ø Docker container run hello:v0.1
		Ø Docker container ls -a
		Ø Docker image history <Image ID>
			? Check out image you created
	
	Echo "console.log(/"this is v0.2/");" >> index.js
	Docker image build -t hello:v0.2 .
	
		Ø Docker image inspect alpine
			? Layers image is composed of
			? Driver used to store the layer
			? Architecture/OS it has been created of
			? Metadata of image & more…
		Ø Docker image inspect --format "{{  json .RootFS.Layers }}" <Image ID>
	
Jargons
		? Layers - A Docker image is built up from a series of layers. Each layer represents an instruction in the image’s Dockerfile. Each layer except the last one is read-only.
		? Dockerfile - A text file that contains all the commands, in order, needed to build a given image.
		? Volumes - A special Docker container layer that allows data to persist and be shared separately from the container itself. Think of volumes as a way to abstract and manage your persistent data separately from the application itself.
